{
    "Read Transaction with Type Mapping": {
        "prefix": "neoreadts",
        "body": [
            "import type { Node, Integer } from 'neo4j-driver'",
            "",
            "const session = driver.session()",
            "",
            "interface ResultShape {",
            "\t${1:p}: ${2:Node<Integer, {",
            "\t\tname: string;",
            "\t\\}>;}",
            "}",
            "",
            "try {",
            "\tconst res = await session.executeRead(",
            "\t\ttx => tx.run<ResultShape>(",
            "\t\t\t`${9:MATCH (p:Person { name: \\$${10:name} \\} )} RETURN ${11:$1}`,",
            "\t\t\t{ ${10}: ${13:'Tom Hanks'} \\}",
            "\t\t)",
            "\t)",
            "",
            "\t${14:// Process Results",
            "\tconst people = res.records.map(",
            "\t\trow => row.toObject()",
            "\t)",
            "",
            "\tconsole.log(people)}",
            "\\}",
            "${15:catch (e) {",
            "\t${16:// Handle Error}",
            "\\}}",
            "finally {",
            "\t// Close the session",
            "\tawait session.close()",
            "}",
            ""
        ]
    },
    "Write Transaction with Type Mapping": {
        "prefix": "neowritets",
        "body": [
            "import type { Node, Integer } from 'neo4j-driver'",
            "",
            "const session = driver.session()",
            "",
            "interface ResultShape {",
            "\t${1:p}: ${2:Node<Integer, {",
            "\t\tname: string;",
            "\t\\}>;}",
            "}",
            "",
            "try {",
            "\tconst res = await session.executeWrite(",
            "\t\ttx => tx.run<ResultShape>(",
            "\t\t\t`${9:MERGE (p:Person { name: \\$${10:name} \\} )} RETURN ${11:$1}`,",
            "\t\t\t{ ${10}: ${13:'Tom Hanks'} \\}",
            "\t\t)",
            "\t)",
            "",
            "\t${14:// Process Results",
            "\tconst people = res.records.map(",
            "\t\trow => row.toObject()",
            "\t)",
            "",
            "\tconsole.log(people)}",
            "\\}",
            "${15:catch (e) {",
            "\t${16:// Handle Error}",
            "\\}}",
            "finally {",
            "\t// Close the session",
            "\tawait session.close()",
            "}",
            ""
        ]
    }
}